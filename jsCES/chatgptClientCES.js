let gptRecipeAnalysisResult;

export async function getChatGPTResponse(userMessage) {
  const response = await fetch('https://api.reonai.net/api/chat', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      messages: [
        {
          role: 'system',
          content: `
ÎÑàÎäî Î¶¨Ïò§ÎÇòÏù¥ Ïª§ÏÑú(Roenai Cursor) Î°úÏä§ÌÑ∞Î•º ÏúÑÌïú Î°úÏä§ÌåÖ Ï†ÑÎ¨∏Í∞ÄÏù¥Ïûê AI Ïñ¥ÏãúÏä§ÌÑ¥Ìä∏Ïïº.
Ïù¥ Î°úÏä§ÌÑ∞Îäî Ïó¥ÌíçÏãù Íµ¨Ï°∞Ïóê ÏÑ∏ÎùºÎØπ ÌûàÌÑ∞Î•º ÏÇ¨Ïö©ÌïòÍ≥†, Ìå¨Í≥º ÌûàÌÑ∞Î•º 0~100 Î≤îÏúÑÎ°ú Ï†ïÎ∞ÄÌïòÍ≤å Ï†úÏñ¥Ìï† Ïàò ÏûàÏñ¥. ÏÇ¨Ïö©ÏûêÎäî Îã§ÏñëÌïú Î™®Îìú(Expert, Balance, Simple, The Roast Journey) Ï§ë ÌïòÎÇòÎ•º ÏÑ†ÌÉùÌï† Ïàò ÏûàÍ≥†, Í∞Å Î™®ÎìúÏóêÏÑúÏùò Í∞úÏûÖ Î∞©ÏãùÏù¥ Îã¨Îùº.
ÏÇ¨Ïö©ÏûêÍ∞Ä Î°úÏä§ÌåÖ Î†àÏãúÌîºÎÇò Ïã§ÏãúÍ∞Ñ Îç∞Ïù¥ÌÑ∞Î•º ÏûÖÎ†•ÌïòÎ©¥, ÎÑàÎäî Îã§ÏùåÏùÑ ÏàòÌñâÌï¥Ïïº Ìï¥:

1. Îç∞Ïù¥ÌÑ∞Î•º Î∂ÑÏÑùÌï¥ÏÑú Î°úÏä§ÌåÖ ÏÉÅÌô©ÏùÑ Ï†ïÌôïÌûà ÌååÏïÖÌïòÍ≥†
2. Ï†ÅÏ†àÌïú ÌîºÎìúÎ∞± ÎòêÎäî Fan/Heater Ï°∞Ï†à Í∂åÍ≥†Î•º Ï†úÏãúÌïòÎ©∞
3. ÏòàÏÉÅ ÌÅ¨Îûô ÌÉÄÏù¥Î∞çÏù¥ÎÇò Îßõ ÌîÑÎ°úÌååÏùºÏùÑ ÏòàÏ∏°ÌïòÍ≥†
4. ÏÇ¨Ïö©ÏûêÏùò Î™®ÎìúÎÇò Í∞úÏûÖ Î≤îÏúÑÏóê Îî∞Îùº Î∞òÏùëÏùÑ Ï°∞Ï†àÌï¥Ïïº Ìï¥.

Ïñ∏Ï†úÎÇò Î™ÖÌôïÌïòÍ≥† Í∞ÑÍ≤∞ÌïòÎ©∞ Ïã§Ïö©Ï†ÅÏù∏ Î∞©ÏãùÏúºÎ°ú ÎãµÎ≥ÄÌï¥Ï§ò. ÏÇ¨Ïö©Ïûê ÏûÖÎ†•ÏùÄ Îã§ÏùåÍ≥º Í∞ôÏïÑ.

Ï§ëÏöî! ÎãµÎ≥ÄÏùò Í∏∏Ïù¥Îäî 10Î¨∏Ïû•ÏùÑ Ï†àÎåÄ ÎÑòÍ∏∞ÏßÄÎßêÏïÑÏïºÌï®. 

          `.trim(),
        },
        { role: 'user', content: userMessage },
      ],
    }),
  });

  const data = await response.json();
  return data.choices?.[0]?.message?.content || 'ÏùëÎãµ ÏóÜÏùå';
}

function validateEvaluationForm() {
  const inputs = document.querySelectorAll(
    '#recipeDataPanel input, #recipeDataPanel textarea'
  );
  let isValid = true;

  inputs.forEach((input) => {
    if (!input.value.trim()) {
      input.classList.add('border-red-500', 'ring-2', 'ring-red-400');
      isValid = false;
    } else {
      input.classList.remove('border-red-500', 'ring-2', 'ring-red-400');
    }
  });

  if (!isValid) {
    alert('‚ö†Ô∏è Î™®Îì† Ìï≠Î™©ÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.');
  }

  return isValid;
}

// document
//   .getElementById('gptEvaluationButton')
//   .addEventListener('click', function (e) {
//     if (!validateEvaluationForm()) {
//       e.preventDefault(); // Ï†ÄÏû• Î°úÏßÅ Ï§ëÎã®
//     } else {

//         console.log('‚úÖ Î™®Îì† Ìï≠Î™©Ïù¥ ÏûÖÎ†•ÎêòÏóàÏäµÎãàÎã§. Ï†ÄÏû•ÏùÑ ÏßÑÌñâÌï©ÎãàÎã§.');
//       };

//   });

document
  .getElementById('gptEvaluationButton')
  .addEventListener('click', async () => {
    collectEvaluationData();
    console.log('‚úÖ collectEvaluationData Ïã§Ìñâ');

    console.log('‚úÖ evaluationData');

    // Ïã§Ï†ú Ï†ÄÏû• Î°úÏßÅ Ïã§Ìñâ (Ïòà: fetch Ìò∏Ï∂ú)
    const evaluationData = collectEvaluationData();

    console.log(evaluationData);
    await requestChatGPTAnalysis(evaluationData);
  });

document
  .getElementById('gptAnalysisResultSave')
  .addEventListener('click', async () => {
    const recipeId = recordIdForGptAnalysisResulSave;
    const memberId = memberIdForGptAnalysisResulSave;
    const analysis = gptRecipeAnalysisResult;
    await saveAnalysisToServer(recipeId, memberId, analysis);
  });

export async function requestChatGPTAnalysis(evaluationData) {
  const formattedMessage = `
  üìä [Ïª§Ìîº Î°úÏä§ÌåÖ ÌèâÍ∞Ä Î∂ÑÏÑù ÏöîÏ≤≠]
  
ÎÑàÎäî Ïª§Ìîº Î°úÏä§ÌåÖ Ï†ÑÎ¨∏Í∞ÄÏù¥Î©∞,
Î°úÏä§ÌåÖ Í≥°ÏÑ† + ÏãúÍ∞Å ÌèâÍ∞Ä + ÏãúÏùå ÌèâÍ∞Ä Îç∞Ïù¥ÌÑ∞Î•º Í∏∞Î∞òÏúºÎ°ú
Î°úÏä§ÌåÖ ÌîÑÎ°úÌååÏùºÏùò Í∏∞Ïà†Ï†Å ÏôÑÏÑ±ÎèÑ, Ìñ•ÎØ∏ ÌäπÏÑ±, Ïô∏Í¥ÄÏ†Å ÌíàÏßà, Í≤∞Ìï® Ïó¨Î∂ÄÎ•º ÌèâÍ∞ÄÌïòÎäî AIÏûÖÎãàÎã§.

üí° Î∂ÑÏÑù Î™©Ìëú:
1. Î°úÏä§ÌåÖ Í≥°ÏÑ†Ïùò Í∏∞Ïà†Ï†Å ÌäπÏÑ± Î∂ÑÏÑù (ÏòàÏó¥, ÌÑ¥, ÌÅ¨Îûô ÌÉÄÏù¥Î∞ç, DTR, Ïø®ÎßÅ Îì±)
2. ÏãúÍ∞Å/ÏãúÏùå ÌèâÍ∞ÄÎ•º Î∞òÏòÅÌïú ÌíàÏßà ÎùºÎ≤®ÎßÅ
3. Ìñ•ÎØ∏ ÌäπÏÑ±Í≥º Í∞ïÏ†ê ÏöîÏïΩ
4. Í∞úÏÑ†Ï†ê ÎèÑÏ∂ú Î∞è Îã§Ïùå Î°úÏä§ÌåÖ Ï†úÏïà
  
  üçÄ ÌèâÍ∞Ä Îç∞Ïù¥ÌÑ∞:
  \`\`\`json
  ${JSON.stringify(evaluationData, null, 2)}
  \`\`\`


  ---

Î∂ÑÏÑù Í≤∞Í≥ºÎäî Îã§Ïùå ÌòïÏãùÏúºÎ°ú Ï†ïÎ¶¨Ìï¥Ï§ò:


## 0. ÏãúÍ∞Å ÌèâÍ∞Ä Ï†êÏàò , ÏãúÏùå ÌèâÍ∞Ä Ï†êÏàò Îç∞Ïù¥ÌÑ∞
‚Üí Í∞Å Î™®Îì† Ìï≠Î™©Ïùò Ï†êÏàòÎ•º Îç∞Ïù¥ÌÑ∞Ïóê ÏÇ¨Ïö©Ìï† Ïàò ÏûàÎèÑÎ°ù Ï†ïÎ¶¨Ìï¥Ï§ò 

## 1. üìâ Î°úÏä§ÌåÖ Í≥°ÏÑ† Í∏∞Ïà† Î∂ÑÏÑù  
‚Üí Íµ¨Ï°∞Ï†Å ÌùêÎ¶ÑÍ≥º Í∑†Ìòï, Ïó¥Îüâ Ïö¥Ïö© Ï†ÅÏ†àÏÑ±, ÌÉÄÏù¥Î∞ç(Ìà¨ÏûÖ/ÌÑ¥/ÌÅ¨Îûô/Ïø®ÎßÅ)
‚Üí temp4 Í∞íÏù¥ drum temp ror , ror Í∞íÏù¥ heater temp rorÏûÖÎãàÎã§. rorÏùÑ Î∂ÑÏÑùÌï¥Ï§ò
‚Üí Ïò®ÎèÑÍ∞í Drum temp , haeter Termp Í≥º, Ï∂úÎ†•Í∞íÏù∏ fan1 , heater , fan2 Îç∞Ïù¥ÌÑ∞Î•º Î∂ÑÏÑùÌï¥Ï§ò 


## 2. üëÅ ÏãúÍ∞Å ÌèâÍ∞Ä Î∂ÑÏÑù (Ïô∏Í¥Ä ÌíàÏßà)  
‚Üí ÌåΩÏ∞Ω, Ïò§Ïùº, Ïâò, Í∑†ÏùºÎèÑ, ÏÉâÏÉÅ Î∂ÑÎ¶¨ÎèÑ, Ï°∞ÏßÅÍ∞ê Îì± Ï¢ÖÌï© ÌèâÍ∞Ä

## 3. üç∑ ÏãúÏùå ÌèâÍ∞Ä Î∂ÑÏÑù (Ìñ•ÎØ∏ ÌäπÏÑ±)  
‚Üí Ìñ•ÎØ∏/Îã®Îßõ/ÏÇ∞ÎØ∏/Î∞îÎîî/Ïï†ÌîÑÌÑ∞ Í∏∞Î∞ò Ìñ•ÎØ∏ ÏÑ±Ìñ• Ï†ïÎ¶¨ Î∞è Í≤∞Ï†ê Ïó¨Î∂Ä ÌåêÎã®

## 4. üß† Ìñ•ÎØ∏ ÎùºÎ≤®ÎßÅ  
- Ìñ•ÎØ∏ Ïä§ÌÉÄÏùº: [ex. Floral, Nutty, Fruity, Chocolaty Îì± Ï§ëÎ≥µ Í∞ÄÎä•]  
- Ìñ•ÎØ∏ Í∞ïÎèÑ Î†àÎ≤®: Low / Medium / High  
- Ìñ•ÎØ∏ Î≥µÌï©ÏÑ±: Îã®Ï°∞Î°úÏõÄ / Ï†ÅÏ†à / ÌíçÎ∂Ä  
- Î°úÏä§ÌåÖ Ïä§ÌÉÄÏùº: Under / Balanced / Over

## 5. ‚öô Í∞úÏÑ† Ï†úÏïà (Í∞úÏ°∞Ï†ï Ï§ëÏã¨)  
- ÌÅ¨Îûô Ïù¥ÌõÑ Ïó¥ Ïú†ÏßÄ Ï†ÑÎûµ  
- ÌûàÌÑ∞/Ìå¨ Í≥°ÏÑ† ÎØ∏ÏÑ∏Ï°∞Ï†ï  
- Î∞∞Ï∂ú ÌÉÄÏù¥Î∞ç & Ïø®ÎßÅ Ï†ÑÎûµ  
- Ï∂îÏ≤ú DTR ÎπÑÏú® Ï†úÏïà

## 6. üßæ Ìïú Î¨∏Ïû• ÏöîÏïΩ ÌèâÍ∞Ä  
‚Üí ‚ÄúÏÇ∞ÎØ∏ Ï§ëÏã¨Ïùò Î∞ùÏùÄ Î°úÏä§ÌåÖÏúºÎ°ú Ïô∏Í¥ÄÏùÄ Íπ®ÎÅóÌïòÎÇò, DTRÏù¥ ÏßßÏïÑ Îã®Îßõ/Ïó¨Ïö¥Ïù¥ Î∂ÄÏ°±Ìï®.‚Äù

---

Î™®Îì† Ìï≠Î™©ÏùÄ Î∂ÑÏÑù Í¥ÄÏ∞∞ + Ï†úÏïà Ï§ëÏã¨ÏúºÎ°ú ÏûëÏÑ±Ìï¥ Ï£ºÏÑ∏Ïöî.  
ÏàòÏπò Í∏∞Î∞ò ÌåêÎã®Í≥º Ìñ•ÎØ∏ Ìï¥ÏÑùÏùÄ Íµ¨Ï≤¥Ï†ÅÏùºÏàòÎ°ù Ï¢ãÏäµÎãàÎã§.
  `;

  try {
    const gptResult = await getChatGPTResponse(formattedMessage);

    gptRecipeAnalysisResult = gptResult; // Ï†ÑÏó≠ Î≥ÄÏàòÏóê Ï∂îÍ∞Ä
    // Í≤∞Í≥ºÎ•º HTML ÏöîÏÜåÏóê ÌëúÏãú
    console.log('gpt-Recipe-Analysis-Result');
    console.log(gptRecipeAnalysisResult);
    const resultBox = document.getElementById('gptAnalysisResult');
    if (resultBox) {
      resultBox.innerText = gptResult;
    } else {
      console.warn(
        '‚ö†Ô∏è Î∂ÑÏÑù Í≤∞Í≥ºÎ•º ÌëúÏãúÌï† DOM ÏöîÏÜå(gptAnalysisResult)Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.'
      );
      console.log('ChatGPT Î∂ÑÏÑù Í≤∞Í≥º:', gptResult);
    }
  } catch (error) {
    console.error('‚ùå GPT Î∂ÑÏÑù ÏöîÏ≤≠ Ïã§Ìå®:', error);
    const resultBox = document.getElementById('gptAnalysisResult');
    if (resultBox) {
      resultBox.innerText =
        'Î∂ÑÏÑù ÏöîÏ≤≠ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.';
    }
  }
}

document.getElementById('chatBtn').addEventListener('click', async () => {
  const input = document.getElementById('userInput').value.trim();
  const output = document.getElementById('chatOutput');

  if (!input) {
    output.innerText = '‚ùó ÏßàÎ¨∏ÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.';
    return;
  }

  // ‚è≥ Î°úÎî© ÌëúÏãú
  output.classList.add('animate-pulse');
  output.innerText = 'Reon aiÍ∞Ä ÏÉùÍ∞Å Ï§ëÏûÖÎãàÎã§... ü§î';

  try {
    const response = await getChatGPTResponse(input);

    output.classList.remove('animate-pulse'); // ‚úÖ Ïï†ÎãàÎ©îÏù¥ÏÖò Ï†úÍ±∞
    output.innerText = response;
  } catch (err) {
    console.error(err);
    output.classList.remove('animate-pulse'); // ‚úÖ ÏóêÎü¨ ÏãúÏóêÎèÑ Ï†úÍ±∞
    output.innerText = '‚ùå ÏùëÎãµÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.';
  }
});

export async function saveAnalysisToServer(recipeId, memberId, analysis) {
  console.log('üß™ ÏÑúÎ≤Ñ Ï†ÄÏû• ÏöîÏ≤≠:', { recipeId, memberId });

  if (!recipeId || !memberId || !analysis) {
    console.warn('‚ùå Ï†ÄÏû• ÏöîÏ≤≠ ÎàÑÎùΩÎêú ÌïÑÎìú ÏûàÏùå');
    return false;
  }

  try {
    const response = await fetch('https://api.reonai.net/api/save-analysis', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        recipeId: recipeId,
        memberId: memberId,
        analysis: analysis,
      }),
    });

    const result = await response.json();

    if (result.status === 200 && result.filename) {
      console.log(`‚úÖ Ï†ÄÏû• ÏôÑÎ£å: ${result.filename}`);
      return result.filename; // ‚úÖ Ï†ÄÏû•Îêú ÌååÏùºÎ™ÖÏùÑ Î¶¨ÌÑ¥
    } else {
      console.warn('‚ö†Ô∏è Ï†ÄÏû• Ïã§Ìå®:', result.message);
      return null;
    }
  } catch (error) {
    console.error('‚ùå ÏÑúÎ≤Ñ Ï†ÄÏû• Ï§ë Ïò§Î•ò:', error);
    return null;
  }
}

window.addEventListener('DOMContentLoaded', () => {
  console.log(userData.id);
  const userId = userData.id;
  const isAdmin = userId === 67;
  loadAnalysisList(userId, isAdmin);
});

async function loadAnalysisList(userId, isAdmin = false) {
  try {
    const res = await fetch(
      `https://api.reonai.net/api/analysis-list/${userId}`
    );
    const result = await res.json();
    const list = result.data;

    const container = document.getElementById('analysisList');
    container.innerHTML = '';

    console.log('üìÇ Î∂ÑÏÑù Î™©Î°ù:', list);

    list.forEach((entry) => {
      let uid = userId;
      let filename = entry;

      // Í¥ÄÎ¶¨ÏûêÏùº Í≤ΩÏö∞ entry ÌòïÏãù: '67/1553_20250421_103302'
      if (isAdmin && entry.includes('/')) {
        [uid, filename] = entry.split('/');
      }

      const item = document.createElement('button');
      item.className =
        'w-full text-left px-4 py-2 bg-white dark:bg-zinc-700 text-zinc-900 dark:text-white rounded hover:bg-zinc-200 dark:hover:bg-zinc-600 transition';
      item.innerText = isAdmin ? `üë§${uid} / ${filename}` : filename;

      item.onclick = () => loadAnalysisDetail(uid, filename);
      container.appendChild(item);
    });
  } catch (error) {
    console.error('‚ùå Î™©Î°ù Î∂àÎü¨Ïò§Í∏∞ Ïã§Ìå®:', error);
  }
}

export async function loadAnalysisDetail(userId, filename) {
  const recipeId = filename.split('__')[0];
  console.log('filename');
  console.log(filename);

  console.log(recipeId);

  fetchRecordDetailsRecipeData(recipeId, userId);

  try {
    const res = await fetch(
      `https://api.reonai.net/api/analysis/${userId}/${filename}`
    );
    const result = await res.json();

    console.log(result);

    const box = document.getElementById('loadgptAnalysisResult');
    if (result.status === 200 && result.data?.analysis) {
      box.innerText = result.data.analysis;
    } else {
      box.innerText = '‚ùå Î∂ÑÏÑù Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.';
    }
  } catch (error) {
    document.getElementById('loadgptAnalysisResult').innerText =
      '‚ùå Î∂ÑÏÑù Î°úÎî© Ïã§Ìå®';
    console.error(error);
  }
}

// ÏÑ†ÌÉùÌïú Î†àÏãúÌîºÎ•º ÏÑúÎ≤ÑÏóêÏÑú Í∞ÄÏßÄÍ≥†Ïò§Îäî Ìï®Ïàò
async function fetchRecordDetailsRecipeData(recordId, recordMemberId) {
  // ÏöîÏ≤≠ÌïòÎ†§Îäî URLÏùÑ ÏΩòÏÜîÏóê Ï∂úÎ†•ÌïòÏó¨ ÌôïÏù∏
  const url = `https://www.reonaicoffee.com/api/records/${recordId}`;
  console.log('Fetching details for:', url);

  console.log(recordMemberId);
  console.log('userData.id', userData.id);
  // ÏöîÏ≤≠Ïóê ÌïÑÏöîÌïú Îç∞Ïù¥ÌÑ∞
  const requestData = {
    clientId: '4d042c50-bd70-11ee-aa8b-e30685fde2fa',
    clientName: 'reon',
    memberId: userData.id, //  ÏÇ¨Ïö©Ïûê ID
    pilot: true, // ÌååÏùºÎüø Î°úÍ∑∏: true,
  };

  try {
    const response = await fetch(url, {
      method: 'POST', // ÏÑúÎ≤ÑÏóêÏÑú ÌóàÏö©ÌïòÎäî Î©îÏÑúÎìúÎ°ú Î≥ÄÍ≤Ω (Ïòà: 'POST')
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(requestData), // POST ÏöîÏ≤≠Ïóê ÌïÑÏöîÌïú Îç∞Ïù¥ÌÑ∞
    });

    if (!response.ok) {
      // ÏùëÎãµ ÏÉÅÌÉú ÏΩîÎìúÍ∞Ä 200Ïù¥ ÏïÑÎãå Í≤ΩÏö∞ ÏóêÎü¨ Ï∂úÎ†•
      console.error('HTTP error:', response.status, response.statusText);
      const errorText = await response.text(); // ÏóêÎü¨ ÏÉÅÏÑ∏ ÎÇ¥Ïö© ÌôïÏù∏
      console.error('Error details:', errorText);
      return;
    }

    const jsonData = await response.json();
    displayDataRecipeData(jsonData); // JSON Îç∞Ïù¥ÌÑ∞Î•º UIÏóê Î∞òÏòÅ

    console.log('JSON Îç∞Ïù¥ÌÑ∞Î•º UIÏóê Î∞òÏòÅ');
  } catch (error) {
    console.error('Error fetching record details:', error);
  }
}

// JSON Îç∞Ïù¥ÌÑ∞Î•º UIÏóê Î∞òÏòÅÌïòÎäî Ìï®Ïàò
function displayDataRecipeData(data) {
  resetChartsAll();
  // ÏùëÎãµ ÎÇ¥Ïùò data Í∞ùÏ≤¥ Ï∂îÏ∂ú
  const details = data.data;
  loadedRoastData = data.data;
  // Ï∂îÏ∂úÌïú Îç∞Ïù¥ÌÑ∞Î•º ÏÇ¨Ïö©ÌïòÏó¨ UI ÏöîÏÜå ÏóÖÎç∞Ïù¥Ìä∏

  console.log(
    'displayData2 Î∂àÎü¨Ïò® jsonÏùò coolingPointTime',
    details.coolingPointTime
  );
  extractSecondsFromTime(details.coolingPointTime);
  extractSecondsFromTimeForTp(details.turningPointTime);

  // ÏΩòÏÜîÏóê Î∂àÎü¨Ïò® ÎÇ¥Ïö© Ï∂úÎ†•
  console.log('Data loaded:', data);
  console.log('Data.data loaded:', details);

  const tpUnderTemp = parseFloat(JSON.parse(details.turningPointTemp || '[]'));
  // ÏΩòÏÜîÏóê Î∂àÎü¨Ïò® ÎÇ¥Ïö©ÏùÑ Ï∂úÎ†•
  console.log('Îç∞Ïù¥ÌÑ∞Í∞Ä Î∂àÎü¨ÏôÄÏ°åÏäµÎãàÎã§: ' + JSON.stringify(details, null, 2));

  const cpUnderTemp = parseFloat(JSON.parse(details.coolingPointTemp || '[]'));

  // Ï∞®Ìä∏Ïóê Î∂àÎü¨Ïò® Îç∞Ïù¥ÌÑ∞Î•º Ï∂îÍ∞Ä
  if (Highcharts.charts.length > 0) {
    let chartLengthData = JSON.parse(details.temp1 || '[]').length;

    chartLengthNumber = chartLengthData;

    //my Recipe chart Ïóê ÎÑ£Í∏∞
    Highcharts.charts[6].update({
      xAxis: {
        max: chartLengthData, // ÌïÑÏöîÌïú Í≤ΩÏö∞ Ïó¨Ïú†Î∂ÑÏùÑ Ï∂îÍ∞Ä (+10)
      },
    });
    Highcharts.charts[7].update({
      xAxis: {
        max: chartLengthData, // ÌïÑÏöîÌïú Í≤ΩÏö∞ Ïó¨Ïú†Î∂ÑÏùÑ Ï∂îÍ∞Ä (+10)
      },
    });
    Highcharts.charts[6].series[3].setData(JSON.parse(details.temp4 || '[]'));
    Highcharts.charts[6].series[4].setData(JSON.parse(details.ror || '[]'));
    Highcharts.charts[6].series[5].setData(JSON.parse(details.temp1 || '[]'));
    Highcharts.charts[6].series[6].setData(JSON.parse(details.temp2 || '[]'));
    Highcharts.charts[6].series[7].setData(JSON.parse(details.temp3 || '[]'));

    Highcharts.charts[6].series[9].addPoint(
      [tpUnderTime, tpUnderTemp],
      true,
      false
    );

    Highcharts.charts[6].series[11].addPoint(
      [CpUnderTime, cpUnderTemp],
      true,
      false
    );

    Highcharts.charts[7].series[3].setData(JSON.parse(details.fan || '[]'));
    Highcharts.charts[7].series[4].setData(JSON.parse(details.heater || '[]'));
    Highcharts.charts[7].series[5].setData(JSON.parse(details.fan2 || '[]'));
  }
}
